package i2c

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"testing"

	"github.com/moov-io/iso8583"
)

type Amounts struct {
	TransactionAmount       int64              `iso8583:"4"`
	SettlementAmount        int64              `iso8583:"5"`
	CardHolderBillingAmount int64              `iso8583:"6"`
	AmountTransactionFee    string             `iso8583:"28"`
	AmountSettlementFee     string             `iso8583:"29"`
	CurrencyCode            string             `iso8583:"49"`
	CurrencyCodeSettlement  string             `iso8583:"50"`
	AdditionalAmounts       *AdditionalAmounts `iso8583:"54"`
}

type AdditionalAmounts struct {
	Amount1 *AdditionalAmount `index:"01"`
	Amount2 *AdditionalAmount `index:"02"`
	Amount3 *AdditionalAmount `index:"03"`
	Amount4 *AdditionalAmount `index:"04"`
	Amount5 *AdditionalAmount `index:"05"`
	Amount6 *AdditionalAmount `index:"06"`
}

type AdditionalAmount struct {
	AccountType  string `index:"01"`
	AmountType   string `index:"02"`
	CurrencyCode string `index:"03"`
	Sign         string `index:"04"`
	Amount       int64  `index:"05"`
}

type testCase struct {
	name          string
	hexDump       string
	expectedError error
}

var testCases = []testCase{
	{
		name:    "sample authorization request (0100)",
		hexDump: ``,
	},
	{
		name:    "sample authorization response (0110)",
		hexDump: `01CE30313130F67A00910EC0A40A0000000004020000313531303031393438363837333635363430303030303030303030303030353030303030303030303030353031303030313232313332393138363130303230303030313633373231383239313830313232303132323030443030303030303030303630303030303038303232313330313633373230303132343535315445524D4944303143415244204143434550544F52202038343038343030323030303732383430443030303030303030303130303031363030303030303030303430323030303030373030303032202020203132333435363132333435363132332020202020202020202020302020202020202020202020202020202020202020202020564953412020202020202020313531303031393438363837333635363431353420313233343536313233343536313233202020202030302020202020202020202020202020202020202020202020202020303030303030203030303030303030303020303030303030303030303030202020202030303030303030303030202020202020202020202020303030323030303030303030303030303030303020202020202020202020202020202030302020202030373638383932`,
	},
	{
		name:    "sample authorization advice request (0120)",
		hexDump: ``,
	},
	{
		name:    "sample authorization advice response (0130)",
		hexDump: ``,
	},
	{
		name:    "sample financial transaction request (0200)",
		hexDump: ``,
	},
	{
		name:    "sample financial transaction response (0210)",
		hexDump: `01D230323130F67A40910EC0A40A000000000402000031353130303139343836383733363635343030303030303030303030303035303030303030303030303035303130303031323231333331343136313030323030303031363337333138333134313031323230313232353534313030443030303030303030303630303030303038303232313330313633373330303132343535315445524D4944303143415244204143434550544F52202038343038343030323030303732383430443030303030303030303130303031363030303030303030303430323030303030373030303032202020203132333435363132333435363132332020202020202020202020302020202020202020202020202020202020202020202020564953412020202020202020313531303031393438363837333636353431353420313233343536313233343536313233202020202030302020202020202020202020202020202020202020202020202020303030303030203030303030303030303020303030303030303030303030202020202030303030303030303030202020202020202020202020303030323030303030303030303030303030303020202020202020202020202020202030302020202030393035343430`,
	},
	{
		name:    "sample financial advice requuest  (0220)",
		hexDump: ``,
	},
	{
		name:    "sample financial advice  response (0230)",
		hexDump: `01CE30323330F67A00910EC0A40A0000000004020000313531303031393438363837333636353430303030303030303030303030353030303030303030303030353031303030313232313333333537363130303230303030313633373531383333353730313232303132323030443030303030303030303630303030303038303232313330313633373530303132343535315445524D4944303143415244204143434550544F52202038343038343030323030303732383430443030303030303030303130303031363030303030303030303430323030303030373030303032202020203132333435363132333435363132332020202020202020202020302020202020202020202020202020202020202020202020564953412020202020202020313531303031393438363837333636353431353420313233343536313233343536313233202020202030302020202020202020202020202020202020202020202020202020303030303030203030303030303030303020303030303030303030303030202020202030303030303030303030202020202020202020202020303030323030303030303030303030303030303020202020202020202020202020202030302020202030202020202020`,
	},
	{
		name:    "sample reversal request  (0420)",
		hexDump: ``,
	},
	{
		name:    "sample reversal response (0430)",
		hexDump: `01F930343330F67A00910EE0A40A0000000004020000313531303031393438363837333637363830303030303030303030303030323030303030303030303030323031303030313232313334343433363130303530303030313633383031383434343330313232303132323030443030303030303030303630303030303038303232313330313633383030303132343530305445524D4944303143415244204143434550544F5220204143515549524552204E414D4520202020202020202020202043495459204E414D4520202020434155534138343038343030323030303732383430443030303030303030303130303031363030303030303030303430323030303030373030303032202020203132333435363132333435363132332020202020202020202020302020202020202020202020202020202020202020202020564953412020202020202020313531303031393438363837333637363831353420313233343536313233343536313233202020202030302020202020202020202020202020202020202020202020202020303030303030203030303030303030303020303030303030303030303030202020202030303030303030303030202020202020202020202020303030323030303030303030303030303030303020202020202020202020202020202030302020202030363836343931`,
	},
}

func TestI2C(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Initialize message with Spec87 (ASCII MTI, binary bitmap)
			msg := iso8583.NewMessage(ITooSeaSpec)

			// Decode the hex dump
			b, err := hex.DecodeString(tc.hexDump)
			if err != nil {
				t.Fatalf("failed to decode hex dump: %v", err)
			}

			// Ensure the message is long enough to skip the 2-byte length prefix
			if len(b) < 2 {
				t.Fatalf("hex dump too short, length: %d", len(b))
			}

			// Skip the first 2 bytes (length prefix)
			msgBytes := b[2:]

			// Unpack the message
			if err := msg.Unpack(msgBytes); err != nil {
				t.Errorf("failed to unpack message: %v", err)
				return
			}

			var amounts Amounts
			if err := msg.Unmarshal(&amounts); err != nil {
				t.Errorf("failed to marshal amounts: %v", err)
				return
			}

			amountsB, err := json.Marshal(amounts)
			if err != nil {
				t.Fatal(err)
			}
			mti, err := msg.GetMTI()
			if err != nil {
				t.Fatal(err)
			}
			fiveFour, err := msg.GetString(54)
			if err != nil {
				t.Fatal(err)
			}

			fmt.Printf("54: %s\n", fiveFour)

			fmt.Printf("mti: %s amounts: %s\n", mti, string(amountsB))

			// Marshal to JSON and print for verification
			_, err = msg.MarshalJSON()
			if err != nil {
				t.Errorf("failed to marshal message to JSON: %v", err)
				return
			}
			//			fmt.Printf("msg: %s\n", string(m))
		})
	}
}
